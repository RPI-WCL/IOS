module src.decision_agent;

import src.IOSTheater;
import src.profiling_agent.ActorProfile;
import src.profiling_agent.ProfilingAgent;
import src.profiling_agent.ATSProfilingAgent;

import java.util.Vector;

import salsa.language.ServiceFactory;
import salsa.messaging.TheaterService;
import salsa.naming.NamingService;
import salsa.naming.UAL;
import salsa.naming.UAN;


behavior FuzzyDecisionActor {

	ATSProfilingAgent profilingAgent = null;
	ActorReference protocolActor = null;
	int sleepTime = 10000;
	long throughput = 0;
	
	double cw = 0.3, pw = 0.7;

	FuzzyDecisionActor() {
		protocolActor = IOSTheater.getProtocolActor();
		profilingAgent = (ATSProfilingAgent)IOSTheater.getProfilingAgent();
		begin();
	}
	
	public void begin() {
		if ( System.getProperty("silent") == null ) {
			standardOutput<-println(System.currentTimeMillis() + "\t" + profilingAgent.processed() + "\t\t" + profilingAgent.getActorProfiles().size() + "\t"
									 + profilingAgent.getAvailableProcessing());
		}

		throughput = profilingAgent.processed();

		if (!profilingAgent.isComputing()) protocolActor<-leaveComputation();

//		if (profilingAgent.isLight() && profilingAgent.isComputing()) {
		if (profilingAgent.isComputing()) {
			protocolActor<-initiateSteal();
		}

		begin() : delay( new Integer(sleepTime) );
	}               

	private double decisionFunction(ActorProfile candidate, UAL source, double remoteProcessing, Vector actorsAtSource) {
		String localId = protocolActor.getUAL().getLocation();
		String foreignId = source.getLocation();

                //fuzzy decision function
		double localProcessing = profilingAgent.getCpuSpeed();

		double computationGain = java.lang.Math.ceil(profilingAgent.getActors().size()/localProcessing) - 1 - java.lang.Math.floor(actorsAtSource.size()/remoteProcessing);
		double totalCommunication = candidate.sent();

		if (totalCommunication < 2) {
			System.err.println("\tcandidate: " + candidate.getUAN().getIdentifier() + ", gain: -99");
			return -99;
		}

		double remoteCommunication = 0;
		for (int i = 0; i < actorsAtSource.size(); i++) {
			remoteCommunication += candidate.getCommWith((UAN)actorsAtSource.get(i));
		}

		double localCommunication = 0;
		for (int i = 0; i < profilingAgent.getActors().size(); i++) {
			UAN current_uan = (UAN)profilingAgent.getActors().get(i);
			if ( !candidate.getUAN().equals(current_uan) ) localCommunication += candidate.getCommWith(current_uan);
		}

		double communicationGain = ((remoteCommunication - localCommunication)/totalCommunication) * candidate.numTargets();

		//fuzzify the values
		double communication_bad = -1.5;
		double communication_good = 1.15;
		double comm_good, comm_bad;
		if (communicationGain < communication_bad) comm_good = 0;
		else if (communicationGain > communication_good) comm_good = 1;
		else comm_good = (communicationGain - communication_bad)/(communication_good - communication_bad);
		comm_bad = 1 - comm_good;

		double computation_bad = -1.25;
		double computation_good = 1;
		double comp_good, comp_bad;
		if (computationGain < computation_bad) comp_good = 0;
		else if (computationGain > computation_good) comp_good = 1;
		else comp_good = (computationGain - computation_bad)/(computation_good - computation_bad);
		comp_bad = 1 - comp_good;

		//use sugeno to get the gain
		//if communication bad and computation bad : don't move : 0
		//if communication bad and computation good :
		//if commuication good and computation bad : 
		//if communication good and computation good : move : 1

		double comb_cmpb = java.lang.Math.min(comp_bad, comm_bad);
		double comb_cmpg = java.lang.Math.min(comp_bad, comm_good);
		double comg_cmpb = java.lang.Math.min(comp_good, comm_bad);
		double comg_cmpg = java.lang.Math.min(comp_good, comm_good);

//		System.err.println("comm_bad: " + comm_bad + ", comm_good: " + comm_good + ", comp_bad: " + comp_bad + ", comp_good: " + comp_good);
//		System.err.println("comb_cmpb: " + comb_cmpb + ", comb_cmpg: " + comb_cmpg + ", comg_cmpb: " + comg_cmpb + ", comg_cmpg: " + comg_cmpg);
		double gain;
		//communication good and computation good
		if (comb_cmpb > comb_cmpg && comb_cmpb > comg_cmpb && comb_cmpb > comg_cmpg) gain = 0;
		//communication bad and computation good
		else if (comb_cmpg > comg_cmpb && comb_cmpg > comg_cmpg) gain = (comp_good + comm_good)/2;
		//communication good and computation bad
		else if (comg_cmpb > comg_cmpg) gain = (comp_good + comm_good)/2;
		//communication good and computation good
		else gain = 1;

//		System.err.println("\tcandidate: " + candidate.getUAN().getIdentifier() + ", com: " + communicationGain + ", cmp: " + computationGain + ",gain: " + gain);

		return gain;
	}

	ActorReference getBestCandidate(UAL source, double remoteProcessing, Vector actorsAtSource) {
		ActorProfile candidate = null;
		double candidateGain = 0.5;

		if (!profilingAgent.isComputing()) return null;

		System.out.println("Getting the best candidate from source: " + source.getIdentifier());
		Vector actorProfiles = profilingAgent.getActorProfiles();
		for (int i = 0; i < actorProfiles.size(); i++) {
			ActorProfile current = (ActorProfile)actorProfiles.get(i);

			double gain = decisionFunction(current, source, remoteProcessing, actorsAtSource);

			System.err.println("\tcurrent: " + current.getUAN().getIdentifier() + ",gain: " + gain);

			if (gain == -99) return null;
			if (gain > candidateGain) {
				candidate = current;
				candidateGain = gain;
			}
		}

		if (candidate != null) {
//			System.err.println("BEST CANDIDIATE: " + candidate.getUAN().getIdentifier());

			profilingAgent.removeProfile(candidate.getUAN());
//			return new UniversalActor( candidate.getUAN() );

			return UniversalActor.getReferenceByName(candidate.getUAN());
		}
		return null;
	}

	Long getThroughput() {
		return new Long(throughput);
	}
}

