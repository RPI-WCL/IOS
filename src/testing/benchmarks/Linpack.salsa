module src.testing.benchmarks;
/*

Modified 3/3/97 by David M. Doolin (dmd) doolin@cs.utk.edu
Fixed error in matgen() method. Added some comments.

Modified 1/22/97 by Paul McMahan mcmahan@cs.utk.edu
Added more MacOS options to form.

Optimized by Jonathan Hardwick (jch@cs.cmu.edu), 3/28/96
Compare to Linkpack.java.
Optimizations performed:
 - added "final" modifier to performance-critical methods.
 - changed lines of the form "a[i] = a[i] + x" to "a[i] += x".
 - minimized array references using common subexpression elimination.
 - eliminated unused variables.
 - undid an unrolled loop.
 - added temporary 1D arrays to hold frequently-used columns of 2D arrays.
 - wrote my own abs() method
See http://www.cs.cmu.edu/~jch/java/linpack.html for more details.


Ported to Java by Reed Wade  (wade@cs.utk.edu) 2/96
built using JDK 1.0 on solaris
using "javac -O Linpack.java"


Translated to C by Bonnie Toy 5/88
  (modified on 2/25/94  to fix a problem with daxpy  for
   unequal increments or equal increments not equal to 1.
     Jack Dongarra)

Translated to SALSA by Kaoutar EL Maghraoui 9/08/03

*/


import java.net.*;
import java.io.*;
import java.util.*;


behavior Linpack {

  double second_orig = -1;
  double initialTime, finalTime, total;		
  double norma;
  int info;	



  void act(String[] args)
  {
    Linpack l = new Linpack();
    l<-run_benchmark();
  }


  void run_benchmark() 
  {
    double a[][] = new double[200][201];
    double b[] = new double[200];
    double x[] = new double[200];
    int n,i,ntimes,info,lda,ldaa;
    int ipvt[] = new int[200];
    
    lda = 201;
    ldaa = 200;
    
    n = 100;
    
    matgen(a,new Integer(lda),new Integer(n),b)@
    startTimer()@
    dgefa(a,b,new Integer(lda),new Integer(n),ipvt,new Integer(0))@
    endTimer()@
    negate(b,new Integer(n))@
    dmxpy(new Integer(n),b,new Integer(n),new Integer(lda),x,a)@
    computeFlops(new Integer(n), b, x)@currentContinuation;
  }
  


  final double abs (double d) {
    return (d >= 0) ? d : -d;
  }

  void startTimer()
  {
    if (second_orig==-1) {
      second_orig = System.currentTimeMillis();
    }
    initialTime = (System.currentTimeMillis() - second_orig)/1000;
  }
  
  void endTimer()
  {
    if (second_orig==-1) {
      second_orig = System.currentTimeMillis();
    }
    finalTime = (System.currentTimeMillis() - second_orig)/1000;
    total = finalTime - initialTime;
  }
	
  void negate(double b[], Integer n)
  {
	for (int i = 0; i < n.intValue(); i++) {
      	b[i] = -b[i];
      }
  }


  final void computeFlops(Integer on, double[] b, double[] x)
  {
    int n = on.intValue();
	
    double mflops_result = 0.0;
    double residn_result = 0.0;
    double time_result = 0.0;
    double eps_result = 0.0;
    double cray,ops,normx;
    double resid,time;

    cray = .056;	

    ops = (2.0e0*(n*n*n))/3.0 + 2.0*(n*n);

    resid = 0.0;
    normx = 0.0;
    for (int i = 0; i < n; i++) {
      resid = (resid > this.abs(b[i])) ? resid : this.abs(b[i]);
      normx = (normx > this.abs(x[i])) ? normx : this.abs(x[i]);
    }
    
      eps_result = this.epslon((double)1.0);
   	residn_result = resid/( n*norma*normx*eps_result );
	residn_result += 0.005; // for rounding
	residn_result = (int)(residn_result*100);
	residn_result /= 100;

	time_result = total;
	time_result += 0.005; // for rounding
	time_result = (int)(time_result*100);
	time_result /= 100;

	mflops_result = ops/(1.0e6*total);
	mflops_result += 0.0005; // for rounding
	mflops_result = (int)(mflops_result*1000);
	mflops_result /= 1000;

    System.out.println("Mflops/s: " + mflops_result +
	    "  Time: " + time_result + " secs" +
	    "  Norm Res: " + residn_result +
	    "  Precision: " + eps_result);

  }	

  /*
    dgefa factors a double precision matrix by gaussian elimination.
    
    dgefa is usually called by dgeco, but it can be called
    directly with a saving in time if  rcond  is not needed.
    (time for dgeco) = (1 + 9/n)*(time for dgefa) .
    
    on entry
    
    a       double precision[n][lda]
    the matrix to be factored.
    
    lda     integer
    the leading dimension of the array  a .
    
    n       integer
    the order of the matrix  a .
    
    on return
    
    a       an upper triangular matrix and the multipliers
    which were used to obtain it.
    the factorization can be written  a = l*u  where
    l  is a product of permutation and unit lower
    triangular matrices and  u  is upper triangular.
    
    ipvt    integer[n]
    an integer vector of pivot indices.
    
    info    integer
    = 0  normal value.
    = k  if  u[k][k] .eq. 0.0 .  this is not an error
    condition for this subroutine, but it does
    indicate that dgesl or dgedi will divide by zero
    if called.  use  rcond  in dgeco for a reliable
    indication of singularity.
    
    linpack. this version dated 08/14/78.
    cleve moler, university of new mexico, argonne national lab.
    
    functions
    
    blas daxpy,dscal,idamax
  */
 
 
  final void dgefa(double[][] a, double[] b, Integer olda, Integer on, int[] ipvt, Integer ojob)
  {
    double[] col_k, col_j;
    double t;
    int j,k,kp1,l,nm1;
    int info;

    int lda = olda.intValue();
    int n = on.intValue();
    int job = ojob.intValue(); 

    
    int kb;
    
    
    // gaussian elimination with partial pivoting
    
    info = 0;
    nm1 = n - 1;
    if (nm1 >=  0) {
      for (k = 0; k < nm1; k++) {
	col_k = a[k];
	kp1 = k + 1;
	
	// find l = pivot index
	
	//Salsa......
	//pivot = this.idamax(new Integer(n-k),col_k,new Integer(k),new Integer(1));
	
	//l = ((Integer) pivot).intValue() + k;
	
	l = this.idamax(new Integer(n-k),col_k,new Integer(k),new Integer(1)) + k;
	ipvt[k] = l;
	
	// zero pivot implies this column already triangularized
	
	if (col_k[l] != 0) {
	  
	  // interchange if necessary
	  
	  if (l != k) {
	    t = col_k[l];
	    col_k[l] = col_k[k];
	    col_k[k] = t;
	  }
	  
	  // compute multipliers
	  
	  t = -1.0/col_k[k];
	  
	  	{
		    int i,nincx, num, incx = 1;
		    num = n-(kp1);
		
		    if (num > 0) {
		      if (incx != 1) {
		
			// code for increment not equal to 1
		
			nincx = n*incx;
			for (i = 0; i < nincx; i += incx)
			  col_k[i +kp1] *= t;
		      } else {
		
			// code for increment equal to 1
		
			for (i = 0; i < num; i++)
			  col_k[i +kp1] *= t;
		      }
		    }
	  	}

	  
	  // row elimination with column indexing
	  
	  for (j = kp1; j < n; j++) {
	    col_j = a[j];
	    t = col_j[l];
	    if (l != k) {
	      col_j[l] = col_j[k];
	      col_j[k] = t;
	    }
	    
	    //daxpy  
	    {
		    int i,ix,iy;
		    int 		num = n-(kp1); 
		    double 		da = t;
		    int 		incx = 1;
		    int 		incy = 1;
		    int 		dx_off = kp1;
		    double 		dx[] = col_k;
		    double 		dy[] = col_j;
		    int 		dy_off = kp1;
		
		    if ((num > 0) && (da != 0)) {
		      if (incx != 1 || incy != 1) {
		
				// code for unequal increments or equal increments not equal to 1
			
				ix = 0;
				iy = 0;
				if (incx < 0) ix = (-n+1)*incx;
				if (incy < 0) iy = (-n+1)*incy;
				for (i = 0;i < num; i++) {
				  dy[iy +dy_off] += da*dx[ix +dx_off];
				  ix += incx;
				  iy += incy;
			  }
			  
			  return;
		      
		      } else {
		
			// code for both increments equal to 1
		
				for (i=0; i < num; i++)
			  		dy[i +dy_off] += da*dx[i +dx_off];
		      }
		    }
		  }
	    }
	}
	else {
	  info = k;
	}
      }
    }
    
    ipvt[n-1] = n-1;
    if (a[(n-1)][(n-1)] == 0) info = n-1;
    
    nm1 = n - 1;
    if (job == 0) {

      // job = 0 , solve  a * x = b.  first solve  l*y = b

      if (nm1 >= 1) {
	for (k = 0; k < nm1; k++) {
	  l = ipvt[k];
	  t = b[l];
	  if (l != k){
	    b[l] = b[k];
	    b[k] = t;
	  }
	  kp1 = k + 1;
	  
	  //daxpy
	  {
		    int i,ix,iy;
		    int 		num = n-(kp1); 
		    double 		da = t;
		    int 		incx = 1;
		    int 		incy = 1;
		    int 		dx_off = kp1;
		    double 		dx[] = a[k];
		    double 		dy[] = b;
		    int 		dy_off = kp1;
		
		    if ((num > 0) && (da != 0)) {
		      if (incx != 1 || incy != 1) {
		
				// code for unequal increments or equal increments not equal to 1
			
				ix = 0;
				iy = 0;
				if (incx < 0) ix = (-n+1)*incx;
				if (incy < 0) iy = (-n+1)*incy;
				for (i = 0;i < num; i++) {
				  dy[iy +dy_off] += da*dx[ix +dx_off];
				  ix += incx;
				  iy += incy;
			  }
			return;
		      } else {
		
			// code for both increments equal to 1
		
			for (i=0; i < num; i++)
			  dy[i +dy_off] += da*dx[i +dx_off];
		      }
		    }
		  }
		
	  }
      }

      // now solve  u*x = y

      for (kb = 0; kb < n; kb++) {
	k = n - (kb + 1);
	b[k] /= a[k][k];
	t = -b[k];
	
	
	//daxpy
		  {
		    int i,ix,iy;
		    int 		num = k; 
		    double 		da = t;
		    int 		incx = 1;
		    int 		incy = 1;
		    int 		dx_off = 0;
		    double 		dx[] = a[k];
		    double 		dy[] = b;
		    int 		dy_off = 0;
		
		    if ((num > 0) && (da != 0)) {
		      if (incx != 1 || incy != 1) {
		
				// code for unequal increments or equal increments not equal to 1
			
				ix = 0;
				iy = 0;
				if (incx < 0) ix = (-n+1)*incx;
				if (incy < 0) iy = (-n+1)*incy;
				for (i = 0;i < num; i++) {
				  dy[iy +dy_off] += da*dx[ix +dx_off];
				  ix += incx;
				  iy += incy;
			  }
			return;
		      } else {
		
			// code for both increments equal to 1
		
			for (i=0; i < num; i++)
			  dy[i +dy_off] += da*dx[i +dx_off];
		      }
		    }
		  }
		}
    }
    else {

      // job = nonzero, solve  trans(a) * x = b.  first solve  trans(u)*y = b

      for (k = 0; k < n; k++) {
      	//Salsa...
      	//token Dt = ddot(k,a[k],0,1,b,0,1);      	  	
      	//t = ((Double) Dt).doubleValue();      	
		t = this.ddot(k,a[k],0,1,b,0,1);
		b[k] = (b[k] - t)/a[k][k];
      }

      // now solve trans(l)*x = y 

      if (nm1 >= 1) {
	for (kb = 1; kb < nm1; kb++) {
	  k = n - (kb+1);
	  kp1 = k + 1;
	  
	  //Salsa...
	  //token Dt = ddot(n-(kp1),a[k],kp1,1,b,kp1,1);
	  //double dt = ((Double) Dt).doubleValue();
	  
	  b[k] += this.ddot(n-kp1,a[k],kp1,1,b,kp1,1);
	  //b[k] += dt;
	  
	  l = ipvt[k];
	  if (l != k) {
	    t = b[l];
	    b[l] = b[k];
	    b[k] = t;
	  }
	}
      }
    }
    
  }

  
 
  /*
    forms the dot product of two vectors.
    jack dongarra, linpack, 3/11/78.
  */
  final double ddot( int n, double[] dx, int dx_off, int incx, double[] dy,
	       int dy_off, int incy)
  {
    double dtemp;
    int i,ix,iy;

    dtemp = 0;

    if (n > 0) {
      
      if (incx != 1 || incy != 1) {

	// code for unequal increments or equal increments not equal to 1

	ix = 0;
	iy = 0;
	if (incx < 0) ix = (-n+1)*incx;
	if (incy < 0) iy = (-n+1)*incy;
	for (i = 0;i < n; i++) {
	  dtemp += dx[ix +dx_off]*dy[iy +dy_off];
	  ix += incx;
	  iy += incy;
	}
      } else {

	// code for both increments equal to 1
	
	for (i=0;i < n; i++)
	  dtemp += dx[i +dx_off]*dy[i +dy_off];
      }
    }
    return(dtemp);
  }


  /*
    finds the index of element having max. absolute value.
    jack dongarra, linpack, 3/11/78.
  */
  final int idamax( Integer on, double[] dx, Integer odx_off, Integer oincx)
  {

    int n = on.intValue();
    int incx = oincx.intValue();
    int dx_off = odx_off.intValue();
		
    double dmax, dtemp;
    int i, ix, itemp=0;

    if (n < 1) {
      itemp = -1;
    } else if (n ==1) {
      itemp = 0;
    } else if (incx != 1) {

      // code for increment not equal to 1

      dmax = this.abs(dx[0 +dx_off]);
      ix = 1 + incx;
      for (i = 1; i < n; i++) {
	dtemp = this.abs(dx[ix + dx_off]);
	if (dtemp > dmax)  {
	  itemp = i;
	  dmax = dtemp;
	}
	ix += incx;
      }
    } else {

      // code for increment equal to 1

      itemp = 0;
      dmax = this.abs(dx[0 +dx_off]);
      for (i = 1; i < n; i++) {
	dtemp = this.abs(dx[i + dx_off]);
	if (dtemp > dmax) {
	  itemp = i;
	  dmax = dtemp;
	}
      }
    }
    return (itemp);
  }


  
  /*
    estimate unit roundoff in quantities of size x.
    
    this program should function properly on all systems
    satisfying the following two assumptions,
    1.  the base used in representing dfloating point
    numbers is not a power of three.
    2.  the quantity  a  in statement 10 is represented to
    the accuracy used in dfloating point variables
    that are stored in memory.
    the statement number 10 and the go to 10 are intended to
    force optimizing compilers to generate code satisfying
    assumption 2.
    under these assumptions, it should be true that,
    a  is not exactly equal to four-thirds,
    b  has a zero for its last bit or digit,
    c  is not exactly equal to one,
    eps  measures the separation of 1.0 from
    the next larger dfloating point number.
    the developers of eispack would appreciate being informed
    about any systems where these assumptions do not hold.
    
    *****************************************************************
    this routine is one of the auxiliary routines used by eispack iii
    to avoid machine dependencies.
    *****************************************************************
  
    this version dated 4/6/83.
  */
  final double epslon (double x)
  {
    double a,b,c,eps;
    //double x = dx.doubleValue();	

    a = 4.0e0/3.0e0;
    eps = 0;
    while (eps == 0) {
      b = a - 1.0;
      c = b + b + b;
      eps = this.abs(c-1.0);
    }
    return(eps*this.abs(x));
  }

  

  /*
    purpose:
    multiply matrix m times vector x and add the result to vector y.
    
    parameters:
    
    n1 integer, number of elements in vector y, and number of rows in
    matrix m
    
    y double [n1], vector of length n1 to which is added
    the product m*x
    
    n2 integer, number of elements in vector x, and number of columns
    in matrix m
    
    ldm integer, leading dimension of array m
    
    x double [n2], vector of length n2
    
    m double [ldm][n2], matrix of n1 rows and n2 columns
  */
  final void dmxpy ( Integer on1, double[] y, Integer on2, Integer oldm, double[] x, double[][] m)
  {
    int j,i;

	int n1 = on1.intValue();
	int n2 = on2.intValue();
	int ldm = oldm.intValue();
	

    // cleanup odd vector
    for (j = 0; j < n2; j++) {
      for (i = 0; i < n1; i++) {
	y[i] += x[j]*m[j][i];
      }
    }
  }


  final void matgen(double[][] a, Integer olda, Integer on, double[] b)
  {
    //double norma;
    int init, i, j;
    
    int lda = olda.intValue();
    int n  = on.intValue();		

    init = 1325;
    norma = 0.0;

	/*  Next two for() statements switched.  Solver wants
	    matrix in column order. --dmd 3/3/97
	*/

    for (i = 0; i < n; i++) {
	    for (j = 0; j < n; j++) {
			init = 3125*init % 65536;
			a[j][i] = (init - 32768.0)/16384.0;
			norma = (a[j][i] > norma) ? a[j][i] : norma;
	      }
	}
    for (i = 0; i < n; i++) {
      b[i] = 0.0;
    }
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
		b[i] += a[j][i];
      }
    }
    
    //return norma;
  }

}
