package src.testing.benchmarks;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

// End SALSA compiler generated import delcarations.

import java.util.Vector;
import src.language.AutonomousActor;

public class Node extends AutonomousActor {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getReception().getLocation() + System.getProperty("identifier"));
		}
		Node instance = (Node)new Node(uan, ual).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Node(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Node.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Node(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Node.getReferenceByLocation(new UAL(ual)); }
	public Node(boolean o, UAN __uan)	{ super(o,__uan); }
	public Node(boolean o, UAL __ual)	{ super(o,__ual); }

	public Node(UAN __uan)	{ this(__uan, null); }
	public Node(UAL __ual)	{ this(null, __ual); }
	public Node()		{ this(null, null);  }
	public Node(UAN __uan, UAL __ual) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getReception().getLocation())) {
			createRemotely(__uan, __ual, "src.testing.benchmarks.Node");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (int _messageSendingDelay, int _messageSize, int _processingValue) {
		Object[] __arguments = { new Integer(_messageSendingDelay), new Integer(_messageSize), new Integer(_processingValue) };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends AutonomousActor.State {
		public Node self;
		public Node.State  _this = this;
		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "src.testing.benchmarks.Node$State" );
			addMethodsForClasses();
		}

		public void updateSelf(ActorReference actorReference) {
			self = (Node)actorReference;
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			super.updateSelf(self);
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Throwable exception = null;

			if (matches != null) {
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			String exceptionMessage = "Message processing exception:\n";
			if (message.getSource() != null) {
				exceptionMessage += "\tSent by: " + message.getSource().toString() + "\n";
			} else exceptionMessage += "\tSent by: unknown\n";
			exceptionMessage += "\tReceived by actor: " + toString() + "\n";
			exceptionMessage += "\tMessage: " + message.toString() + "\n";
			if (exception == null) {
				if (matches == null) {
					exceptionMessage += "\tNo methods with the same name found.\n";
				System.err.println(exceptionMessage);
					return;
				}
				exceptionMessage += "\tDid not match any of the following: \n";
				for (int i = 0; i < matches.length; i++) {
					exceptionMessage += "\t\tMethod: " + matches[i].getName() + "( ";
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						exceptionMessage += parTypes[j].getName() + " ";
					}
					exceptionMessage += ")\n";
				}
				System.err.println(exceptionMessage);
				return;
			} else {
				exceptionMessage += "\tThrew exception: " + exception + "\n";
				System.err.println(exceptionMessage);
				exception.printStackTrace();
			}
		}

		Vector references;
		int messageSize, messageSendingDelay, processingValue;
		void construct(int _messageSendingDelay, int _messageSize, int _processingValue){
			messageSize = _messageSize;
			messageSendingDelay = _messageSendingDelay;
			processingValue = _processingValue;
			references = new Vector();
		}
		public void addReference(Node reference) {
			references.add(reference);
		}
		public void do_stuff(Node source, byte[] data) {
			for (int i = 0; i<processingValue; i++){
				double dummy = java.lang.Math.pow(12345.56789, 12345.456789);
			}
			{
				// source<-do_stuff(((Node)self), new byte[messageSize])
				{
					Object _arguments[] = { ((Node)self), new byte[messageSize] };
					Message __message = new Message( self, source, "do_stuff", _arguments, null, null );
					__messages.add( __message );
				}
			}
		}
		public void startSending() {
			if (references.size()==0) 			{
				// ((Node)self)<-do_stuff(((Node)self), new byte[messageSize])
				{
					Object _arguments[] = { ((Node)self), new byte[messageSize] };
					Message __message = new Message( self, ((Node)self), "do_stuff", _arguments, null, null );
					__messages.add( __message );
				}
			}
			for (int i = 0; i<references.size(); i++){
				{
					// references.get(i)<-do_stuff(((Node)self), new byte[messageSize])
					{
						Object _arguments[] = { ((Node)self), new byte[messageSize] };
						Message __message = new Message( self, references.get(i), "do_stuff", _arguments, null, null );
						__messages.add( __message );
					}
				}
			}
		}
	}
}